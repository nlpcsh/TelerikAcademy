# Патерни за създаване

## Singleton

* Мотивация
В много случаи е важно даден клас да има само една инстанция. Обикновенно се използват за централизирано управление на ресурси за вход и изход и осигуряват глобалена точна на достъп до самате тях.
Една и съща инстанция може да се извиква от всяко място без да може да се извиква констуктора директно. 

* Предназначение
Осигурява създаването само на една инстанция на даден клас. Осигурява глобална точка на достъп до обекта.

  * Примери - една конзола, един изход към принтера, конфигурационен клас и др.
  * Понякога се определя грешно като глобална променлива, но не е!

* Вероятни проблеми:
  * Lazy loading (създаване при първа необходимост)
  * Thread-safe - не трябва да се използва в многонишкови приложения
  * Трудно се тестват
  * Нарушава се правилото за една задача на клас (SRP)

## Simple Factory

* Мотивация
Мнгого често използван - енкапсулира логиката по създаване на обект. Ако се налага промяна като - създаване на нов обект или модификация на текущ вариант на обект се променя само в един клас.

* Използване
Създава се инстанция на "фабриката" и и се подават необходимите параметри за производството на продукта.

* Вероятни проблеми - при добавянето на нов тип профукт трябва да се модифицира кода на "фабриката"

## Prototype

* Мотивация
Представлява фабрика за клониране на нови инстанции от прототипен обект. Създава обекта чрез клониране на прототипа вместо използването на `new` оператора. Елиминира потенциално скъпите стъпки по създаване на нов обект.

  * Примери - копие на уеб ресурси вместо тяхното сваляне винаги като са необходими; взимане на копие от настоящето състояние на обект; скриване на конструкторите и разрешаване на клонирането...